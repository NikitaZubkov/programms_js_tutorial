/**
    ====== Циклы ======
    Допустим у нас есть задача: нужно вывести все значения, которые хранятся в массиве. 
    Т.к. ключи в массиве начинаются с 0, то нам нужно выполнить одну и ту же операцию несколько раз. 
    При этом в ходе каждой итерации нужно увеличивать число соответствующее нужному ключу массива.

    Для такой задачи используются циклы:
    - for
    - while
    - do-while

    === for
    В цикле for передаётся три выражения: 
    - объявленная или объявляемая переменная, которому также задаётся начальное значение
    - условие выхода из цикла
    - выражение, которое меняет переменную перед каждой итерацией

    Пример:

    ```
    for (var i = 0; i < 10; i++) {
        // Тело цикла, повторяемое n-раз
        console.log(i);
    }
    ```

    В данном случае мы объявляем переменную i, которую будем увеличивать для получения номера ключа массива.
    Далее присваиваем ей начальное значение 0, далее ограничиваем её значение 10, а также
    указываем выражение, которое будет изменять переменную.

    В нашем случае в консоли будут выводиться цифры от 0 до 9, т.к. после увеличения i до 10 условие i < 10 не соблюдается и 
    мы выходим из цикла.

    Для вывода значений массива: 

    ```
    // length - это свойство массива, в котором записано количество хранимых значений
    var arr = [10, 12, 42, 366],
        _lenght = arr.length,
        i = 0;

    // Не обязательно объявлять изменяемую переменную внутри цикла
    for (i = 0; i < _lenght; i++) {
        // На каждой итерации получаем значение в массиве по ключу i
        var item = arr[i];
        console.log(item);
    }
    ```

    По аналогии с условием if не обязательно ограничивать тело цикла, если в нём только одна строка:

    ```
    for (var i = 0; i < 10; i++)
        console.log(i);

    ```

    Важное замечание: к переменной i, объявленной внутри цикла через var, можно будет обратиться, и её значение например 
    в последнем случае будет равно 10:

    ```
    // Тело цикла не обязательно указывать, в данном примере оно опускается
    for (var i = 0; i < 10; i++);

    /**
     * Переменная доступна, её значение 10, т.к. мы в последней итерации увеличили значение i до 10,
     * дошли до проверки i < 10, проверка не была пройдена и мы вышли из цикла
     */
    console.log(i); // 10
    ```

    Как можно по другому объявить переменную будет далее. 
    Более подробно про цикл можно прочить "здесь https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/for".

    === while
    Отличие while от for в том, что в while передаётся только одно выражение-условие. Пока оно будет true, цикл будет работать.

    Перепишем пример с циклом for на while:

    ```
    var i = 0;

    // Условие работы цикла
    while (true) {
        if (i < 10) {
            console.log(i);
            i++;
        } else {
            break;
        }
    }
    ```

    Здесь мы в качестве условия прописываем true, таким образом создавая "бесконечный цикл".
    Далее прописываем условие изменения i и когда i становится равной 10, мы попадаем в else.
    Далее выполняется конструкция break, которая позволяет выйти из любого цикла.

    Если же нам нужно пропустить просто итерацию, то используется ключевое слово continue:

    ```
    var i = 0;

    // Условие работы цикла
    while (true) {
        if (i < 10) {
            i++;
            continue;
            console.log(i);
        } else {
            console.log(i);
            break;
        }
    }
    ```

    Вывод в консоль будет только 1 раз.

    === do-while
    Цикл аналогичен while, с той лишь разницей, что этот гарантированно пройдёт один раз.

    ```
    var i = 0;

    do {
        if (i < 50) {
            i++;
            console.log(i);
        } else {
            break;
        }
    } while (i < 50);
    ```

    Также в JS есть методы по перебору массивов и объектов (пример forEach) и пр. циклы, похожие на for (например for...in).
    Более подробно про них можно прочитать "здесь 
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/%D0%A6%D0%B8%D0%BA%D0%BB%D1%8B_%D0%B8_%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8
    http://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript.html
    https://fooobar.com/questions/355330/difference-between-foreach-and-for-loop-in-javascript
    https://stackoverflow.com/questions/31399411/go-to-next-iteration-in-javascript-foreach-loop"
*/