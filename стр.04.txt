/**
    ====== Переменные ======

    Итак, мы написали первую программу, выполнили её через консоль и через подключенный файл.
    Мы передали число в функции console.log и alert.

    Разберёмся с тем, как хранить информацию в коде, что такое типы данных, переменные и как с ними работать.

    === Типы данных.
    В JS (как впрочем и в любом другом языке программирования) существуют разные типы данных, с которыми может работать процессор.
    На данный момент существует 8 типов данных:
    - числа
    Это и целые числа (0, -1, 123 ...), и числа с плавающей запятой (0.1, 3.14 ...)
    к числам также относятся положительная и отрицательная бесконечность (Infinity, -Infinity), а также специальное число
    NaN, обозначающее ошибку при вычислении (например деление 0/0)

    - строки
    Это любой набор символов заключённый в одинарные или двойные кавычки ("тест", 'тест2')

    - логичиский тип данных: true, false. 
    Нужен как понятно из названия для обозначения ложности или истинности

    - специальный тип данных undefined.
    Он нужен чтобы сообщить пользователю или интерпретатору, что запрашиваемая информация не существует.

    - специальный тип данных null.
    Нужен для указания отсутствия какого либо типа данных.

    - Объект
    В других языках программирования объект может называться например ассоциативным массивом.
    Это структура данных, которая нужна для хранения других данных по определённым ключам, которые указывает сам пользователь: 

    ```
    // В данном объекте два поля: в первом поле значение 123 хранится по ключу "test", во втором поле строка "string" хранится по ключу "test2"
    {
        test: 123,
        test2: "string"
    }
    ```

    Этот объект создан через так называемую "литеральную нотацию".
    В литеральной нотации объект описывается внутри блока {}, как набор пар ключ/значение.

    Более подробно про это "здесь 
    http://largescalejs.ru/object-literal-notation/
    http://docode.ru/challenges/javascript-sozdayte-literal-obekta"

    Часто использующийся массив в JS - это тот же объект. 
    ```
    [12, 42, 54]
    ```
    Разница между объектом и массивом в том, что в массиве все ключи имеют только числовые имена:
    0, 1, 2 ...
    При этом первый элемент имеет индекс 0.

    Чтобы создать массив и объект можно использовать изначально досутпные объекты Object и Array:
    ``` 
        // Создаём объект с двумя полями
        new Object({a: 12, b: 13});

        // Создаём массив с тремя элементами
        new Array(1,2,3);
    ```

    Важное замечание, которое будет более подробно объясняться в следующих главах: в JS все типы данных условно говоря можно разделить на две группы:
    - примитивные типы данных
    - объекты
    Примитивами являются только 7 типов данных. Остальные конструкции, которые Вы встретите - это объекты. Функции, массивы, классы - всё это объекты.

    Можно прочитать об это "здесь 
    https://fooobar.com/questions/164142/how-is-almost-everything-in-javascript-an-object
    http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/".
    Это основные типы данных, с которыми Вы будете работать в ближайшее время.
    Также в js появились два новых типа данных:
    - символы в стандарте ES6
    - BigInt
    Их мы будем рассматривать в будущем

    Более подробно про "типы данных 
    https://habr.com/ru/post/240223/
    https://fooobar.com/questions/3113/what-is-the-difference-between-null-and-undefined-in-javascript
    https://javascript.ru/forum/misc/35121-null-i-undefined-v-chem-raznica-i-primenenie.html
    "

    === Переменные.
    Для хранения данных используются так называемые переменные - это определённый адрес в памяти, в котором хранится наша информация. 
    Для доступа к этому адресу мы используем имя переменной, которое указывается при её создании.

    Пример объявления переменной: 

    ```
    var a;
    ```

    Здесь a - это имя переменной, а var - это инструкция, с помощью которой мы объявляем переменную.
    После этого интерпретатор при чтении кода увидит переменную и дальше может с ней работать.
    Важно: 
    1. При обычном объявлении переменной её значение по умолчанию undefined.
    2. В других языках программирования при объявлении переменной нужно указывать тип данных. Например int, short, char и т.д.
    Таким образом мы указываем тип данных и размер занимаемой памяти под переменную. Такой язык называют языком со статической типизацией. 
    В js интепретатор сам определяет тип данных и то, сколько памяти должна занять переменная. В этом случае говорят, что языке динамически типизирован.
    Более подробно про типизацию "здесь https://habr.com/ru/post/161205/".

    Чтобы инициализировать переменную, т.е. присвоить значение, мы указываем его следующим образом: 

    ```
    var a = 12;
    ```

    Мы проинициализировали переменную, присвоив ей значение 12;
    Аналогично можно присвоить значение любого типа данных:

    ```
    var a = "12";
    var a = false;
    var a = {};
    ```

    В случае, если мы объявим и проинициализируем переменную с одним и тем же именем, то её значение просто перепишется. При этом ошибки в 
    консоли не будет.

    Важное замечание: 
    var относится к тем ключевым словам в js, которые нельзя использовать в качестве имени переменной. 
    Более подробно про это можно прочитать "здесь https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Lexical_grammar#%D0%9A%D0%BB%D1%8E%D1%87%D0%B5%D0%B2%D1%8B%D0%B5_%D1%81%D0%BB%D0%BE%D0%B2%D0%B0".

    === typeof.
    Иногда бывает, что мы не знаем, какого типа данных та или иная переменная. В этом случае для проверки типа данных используется
    конструкция typeof: 

    ```
    // Переменные можно объявлять каждый раз заново через var
    // А можно через запятую объявить несколько переменных, используя var только один раз
    var a = 12;

    var b = "test",
        c = true,
        d = {
            test1: "test2"
        },
        e = [1,2,3],
        f = null,
        g = undefined, 
        h = NaN,
        i = Infinity;

    // В консоли будет строка "number"
    console.log(typeof a); 

    // "string"
    console.log(typeof b); 

    // "boolean"
    console.log(typeof c); 

    // "object"
    console.log(typeof d); 

    // "object", т.к. массив в js это тоже объект
    console.log(typeof e); 

    // "object"
    console.log(typeof f); 

    // "undefined"
    console.log(typeof g); 

    // "number", т.к. NaN 0 это тоже число
    console.log(typeof h); 

    // "number" - аналогично с NaN
    console.log(typeof i); 
    ```

    Особенность typeof с определением типа данных у null. В логе будет не null, а object. 
    Более подробно "здесь https://habr.com/ru/post/200664/", но если в двух словах -
    это особенность самого JS, точнее особенность определения типов данных, которая была намеренно внедрена в нём 
    ещё на этапе создания самого языка.

    Более подробно про "typeof 
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#null
    https://blog.logrocket.com/javascript-typeof-2511d53a1a62/
    https://medium.com/devschacht/javascript-typeof-43591ab15bef"

    === Работа с объектами и массивами. 
    Рассмотрим то, как работать с объектами, массивами и что у них общего со строками.

    Допустим у нас есть объект:

    ```
    var a = {
        test: 12
    };
    ```

    Как можно получить значение 12 по ключу test: 

    ```
    var a = {
        test: 12,
        "test-2": 13
    };

    console.log(a.test);

    /**
     * То же самое, что и a.test
     * Однако только через a["test-2"] можно получить доступ по ключ с например дефисом в имени 
     */
    console.log(a["test-2"]);
    ```

    Важное замечание: в JS при интепретации кода всем ключам в объекте добавляются кавычки. 
    Если мы хотим добавить в объекте поле с ключом с нетипичным именем (например тот же дефис), то нужно ставить кавычки,
    чтобы не было ошибок.

    Аналогично с массивом.

    ```
    var a = [1,2,3];

    // Получаем значение по первому ключу, который в массиве под цифрой 0
    console.log(a[0]);
    ```

    Разница только в особенности самого массива, в котором все ключи - это числа (начиная с нулевого индекса).

    === Операции с переменными, приведение типов
    Итак, мы разобрались с тем, что такое переменные, как их объявлять, инициализировать.
    Теперь вопрос, как мы можем с ними работать. 

    Существует несколько типов операций над переменными: 
    - Арифметические. Привычные нам сложение, вычитание, умножение и деление. 
    - Операции сравнения. Больше, меньше, равно.
    - Логические. Логические И, ИЛИ, НЕ, Исключающее ИЛИ.
    - Побитовые. Изменение значения числа путём сдвига битов.

    Рассмотрим более подробно: 

    1. Арифметические операции.

    ``` 
    var a = 5,
        b = 2,
        c;

    // Складываем два числа, результат сложения сохраняется в переменную c, выводим результат сложения
    c = a + b;
    console.log(c);

    // Аналогично с вычитанием
    c = a - b;
    console.log(c);

    // Выводим в консоль результат умножения чисел
    console.log(a * b);

    // Аналогично с делением, результат: 2,5
    console.log(a / b);

    // Деление с остатком, результат: 1
    console.log(a % b);
    ```

    В случае с делением с остатком:
    как понятно из названия, при делении с остатком a % b, мы делим число a на число b, и возвращаем всё, что осталось от деления. 
    При этом мы можем делить и целые и дробные числа.
    Более подробно про "деление с остатком https://ru.stackoverflow.com/questions/734171/%D0%92%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%BA%D0%B0-%D0%BE%D1%82-%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B2-javascript".
    
    Другое важное замечание:
    если мы будем складывать дробные числа (т.е. числа с плавающей запятой), то мы можем получить не очевидный результат:

    ```
    var a = 1.1, 
        b = 2.1,
        c = 0.1,
        d = 0.2;

    // 3.2
    console.log(a + b);

    // 1.2000000000000002
    console.log(a + c);

    // 0.30000000000000004
    console.log(c + d);
    ```

    Сейчас про такую особенность JS нужно просто знать. Но если в двух словах - это скорее не особенность JS, 
    а особенность всех языков программирования, которые хранят числа в том же формате данных, что и в js.
    JS хранит числа с плавающей запятой согласно определённому стандарту IEEE 754. Т.е. любой язык, который хранит 
    данные по аналогичному алгоритму также будет страдать от отсутствия точности при операциях с дробными числами.
    Более подробно про хранение чисел с "плавающей запятой https://medium.com/angular-in-depth/javascripts-number-type-8d59199db1b6 https://www.youtube.com/watch?v=wPBjd-vb9eI"
    
    Теперь рассмотрим более подробно операции с другими типами данных: 

    ``` 
    var a = 5,
        c = "test",
        d =  false,
        e = true,
        f = null, 
        g = undefined;

    /**
     * Сложение
     */

    // 5test
    console.log(a + c);

    // 5
    console.log(a + d);

    // 6
    console.log(a + e);

    // NaN
    console.log(a + g);

    // testundefined
    console.log(c + g);

    /**
     * Вычитание
     */

    // NaN
    console.log(a - c);

    // 5
    console.log(a - d);

    // 4
    console.log(a - e);

    // NaN
    console.log(a - g);

    /**
     * Умножение, деление
     */

    // NaN
    console.log(a * c);
    console.log(a / c);

    // 0
    console.log(a * d);

    // Infinity
    console.log(a / d);

    // 5
    console.log(a * e);
    console.log(a / e);

    // NaN
    console.log(a * g);
    console.log(a / g);
    ```

    Почему мы получаем именно такие результаты?

    Здесь нужно отойти в сторону и рассмотреть само преобразование типов данных
    Если мы производим какие либо операции между разными типами данных, происходит так называемое "приведение типов", 
    когда он тип данных приводится (т.е. преобразовывается) в другой тип данных. 

    Выше были рассмотрены примеры "неявного" приведения типов, когда за преобразование типов данных отвечает не программист, 
    а интерпретатор. 
    При "явном" приведении типов данных используются так называемые встроенные конструкторы:
    - String
    - Number
    - Boolean 

    Более подробно про конструкторы будет рассказываться в главе с функциями. Сейчас важно знать, что использую эти конструторы можно
    напрямую указать, что та данные, хранимые в переменной преобразовываются в строку (если использовать String), число (Number) или
    логический тип данных (Boolean):

    ```
        var a = 12;

        a = String(a);
        console.log(a);

        console.log(Number(a));
        console.log(Boolean(a));
    ```

    Также стоит отметить, что несмотря на то, что примитивы не являются объектами и у них нет никаких свойств, мы можем вызывать 
    некоторые методы и поля благодаря конструкторам String, Number, Boolean. 

    Если допустим нужно получить количество символов у строки, то можно сделать так:

    ```
        var str = "тестовая строка";

        console.log(str.length); // 15
    ```

    В примере выше при str.length 
    - временно создаётся специальный объект, в который оборачивается примитив
    - возвращается значение поля length
    - специальный объект удаляется

    Более подробно про "эти конструкторы, примитивы и объекты
    https://medium.com/@sergeybulavyk/%D0%BF%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2-%D0%B2-javascript-35a15ddfc333
    https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/Primitive#%D0%9E%D0%B1%D0%B5%D1%80%D1%82%D0%BA%D0%B8_%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D1%85_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2_%D0%B2_JavaScript
    https://blog.mavenhive.in/primitives-vs-objects-in-javascript-1bd9fc0b8fcd
    https://www.vojtechruzicka.com/javascript-primitives/
    https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/
    "

    Обобщая всё по приведению можно сделать вывод, что существует только три варианта приведения типов:
    - строковое
    - булевое
    - численное

    Если потренироваться и посмотреть на то, как преобразовываются те или иные типы данных, 
    какие есть приоритеты в преобразовании (какой тип данных к какому приводится), то в дальнейшем не будет
    никаких сложностей при работе с разными данными.

    Более подробно про "приведение типов 
    https://learn.javascript.ru/type-conversions
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators#%D0%9F%D1%80%D0%B8%D0%BE%D1%80%D0%B8%D1%82%D0%B5%D1%82_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BE%D0%B2
    https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23
    https://medium.com/@frontman/%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2-%D0%B2-js-9d6f1845ea96
    https://medium.com/@frontman/%D0%BF%D1%80%D0%BE-%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2-%D0%B2-js-%D0%B8-%D0%BC%D0%B0%D0%B3%D0%B8%D1%8E-%D1%87%D0%B0%D1%81%D1%82%D1%8C-2-431726e72d38
    "

    Возвращаясь к арифметическим операциям, в случае с undefined любая арифметическая операция с числом приводит к NaN - ошибке математической операции.

    При вычитании/умножении/делении числа и строки мы будем получать NaN. 
    Более подробно про это будет в следующих главах, но если в двух словах - в ходе приведения типов мы не можем привести строку к числу. 
    И из-за этого мы получаем NaN.

    В случае сложения со строкой несколько проще.
    При сложении любого типа данных со строкой этот тип приводится к строке и все полученные символы добавляются к строке. 
    Т.е. складываем "test" и undefined. undefined добавляется к строке "test", получаем "testundefined".
    Сложение строк также по другому называют конкатенацией. До ES6 основным способом конкатенацией являлось арифметическое сложение строк. 
    При появлении ES6 появилась фича "шаблонные строки", когда всё строка помещалась в ``, а текст из нужной переменной вставлялся через ${NameVariable}:

    ```
    var a = "Нужный текст",
        b = `Здесь записан ${a} и ничего больше.`

    console.log(b);
    ``` 

    Более подробно про "сложение строк 
    https://developer.mozilla.org/ru/docs/Learn/JavaScript/%D0%9F%D0%B5%D1%80%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B3%D0%B8/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%B8
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/template_strings
    ".

    2. Операции сравнения.

    С операциями сравнения в JS несколько сложнее чем в других языках, т.к. у нас есть проверка не только по значению, но и 
    по типу данных, т.к. в js тип данных переменной может меняться в ходе работы программы.

    Примеры сравнения некоторых типов данных: 

    ```
    var a = 5, 
        b = "5",
        c = 0,
        d = "test",
        e = "test1",
        f = undefined,
        g = false,
        h = null,
        i;

    // Обычное сравнение по значению, строка приводится к числу, поэтому результат true
    console.log(a == b);

    // Строгое сравнение не только по значению, но и по типу данных, результат false
    console.log(a === b);

    // Идёт приведение типов к числу, логический false приводится к 0, идёт не строгое сравнение, результат true
    console.log(c == g);

    // Здесь уже false, операции сравнения с undefined и null - это особые операции и их нужно рассматривать отдельно
    console.log(c == f);
    console.log(c == h);

    /** 
     * Сохраняем результат сравнения в переменную. Скобки здесь не обязательны, 
     * но если операция сравнения длинная, то они рекомендуемы. Результат операции false
     */
    i = (d == e);
    console.log(i);

    // Обычное сравнение, false
    console.log(a > b);

    // Больше или равно, true
    console.log(a >= b);

    // Обычное неравенство значений, идёт приведение типов к числу, результат false
    console.log(a != b);

    // Строгое неравенство значений, true
    console.log(a !== b);
    ```
    Более подробно про "операции сравнения 
    https://learn.javascript.ru/comparison
    https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a
    https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/
    "

    При сравнении объектов появляются отличия от сравнения примитивных типов данных:

    ```
    var a = {},
        b = {};

    console.log(a == b);
    console.log(a === b);
    ``` 

    Оба вывода дадут false, хотя при первом взгляде они ничем не отличаются. Однако отличие всё же есть:
    в переменных хранятся не сами объекты, а ссылки в памяти на эти объекты. Поэтому даже если создать одинаковые по содержанию объекты,
    при их логическом сравнении они будут разными. Следовательно чтобы сравнение объектов дало true:

    ```
        var a = {},
            b = a;

        console.log(a === b);
    ```

    Подробнее про "ссылки, объекты и операции с ними 
    https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0
    https://learn.javascript.ru/object#kopirovanie-po-ssylke 
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_Objects"

    Если же мы хотим сравнить объекты с точки зрения содержащихся в них свойств, то тут появляются некоторые сложности:
    нам нужно сравнивать содержимое вне зависимости от того, в каком порядке прописаны свойства. Для решения подобных задач существуют уже 
    готовые решения в различных библиотеках, например в библиотеке "lodash https://lodash.com/docs/#isEqual".

    3. Логические операции.

    Под логическими операциями мы имеем ввиду:
    - Логическое ИЛИ,
    - Логическое И,
    - Логическое НЕ.

    Все эти операции могут использовать не только с логическим типом данных boolean, но и с любым другим типом данных.
    При логических операциях сравниваемые значения приводятся к логическим и далее идёт логика самого операнда.
    Рассмотрим их более подробно.

    В случае логического ИЛИ находится первое истинное значение и возвращается исходное. Т.е.:

    ```
    var a = 1,
        b = 0,
        c = true,
        d = false;

    // Результат: 1
    console.log(a || b);

    // Результат: true
    console.log(c || d);
    ```

    При логических операциях к false приводятся:
    - число 0
    - пустая строка ""
    - null
    - undefined
    - NaN

    Всё остальное приводится к true (даже пустой массив [] или пустой объект {});

    В случае логического И находится первое ложное значение и возвращается его исходное значение.
    Если же все они истинны, возвращается последнее значение: 

    ```
    var a = 1,
        b = 0, 
        c = 13,
        d = 5;

    // 0
    console.log(a && b)

    // 13
    console.log(a && c)

    // 5
    console.log(a && c && d)

    // 0
    console.log(a && c && d && b)
    ```

    В случае логического НЕ значение приводится к инверсированному логическому (т.е. если значение true, !true === false) и 
    возвращается также в логическом виде:

    ```
    var a = 1,
        b = 0, 
        c = undefined,
        d = {};

    // false
    console.log(!a)

    // true
    console.log(!b)

    // true
    console.log(!c)

    // false
    console.log(!d)
    ```

    Более подробно про "логические операции https://learn.javascript.ru/logical-operators https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/%D0%9B%D0%BE%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D1%8B"

    === Побитовые операции
    Побитовые операции не так часто используются в обычных задачах при работе с js, т.к. не так часто нужно работать с числами
    на уровне отдельных битов.

    В результате побитовых операций возвращается новое число, которое является результатом сравнения или изменения битов исходных чисел.
    Например: 
    ```
        /**
         * В двоичном виде 10:  1010
         * а 3 в двоичном виде: 0011
         */
        var a = 10,
            b = 3,
            c = -10;

        /** 
         * Побитовое И
         * Возвращает 1 в тех разрядах, которые у обоих операндов были равны 1.
         */
        console.log(a & b); // 2

        /** 
         * Побитовое ИЛИ
         * Возвращает 1 в тех разрядах, которые хотя бы у одного из операндов были равны 1.
         */
        console.log(a | b); // 11

        /** 
         * Побитовое исключающее ИЛИ
         * Возвращает 1 в тех позициях, которые только у одного из операндов были равны 1.
         */
        console.log(a ^ b); // 9

        /** 
         * Побитовое НЕ
         * Инвертирует биты операнда: при инвертировании меняется знак числа и добавляется -1
         * побитовое НЕ можно записать в виде -(x + 1), где x - инвертируемое число
         */
        console.log(~a); // -6

        /** 
         * Сдвиг влево
         * Сдвигает двоичное представление числа a на b разрядов влево заполняя освободившиеся справа разряды нулями
         */
        console.log(a << b); // 80

        /** 
         * Арифметический сдвиг вправо
         * Сдвигает двоичное представление числа a на b разрядов вправо. Освобождающиеся разряды заполняются  знаковым битом
         */
        console.log(a >> b); // 1

        /** 
         * Логический сдвиг вправо
         * Сдвигает двоичное представление числа a на b разрядов вправо. Освобождающиеся разряды заполняются нулями.
         * Для положительных чисел арифметический и логический сдвиг вправо приводит к одинаковому результату.
         */
        console.log(a >>> b); // 1

        /**
         * Для отрицательных же чисел результат совсем другой
         * Т.к. 
         * -10 >> 3  === 0b1111111111111111111111111111 0001 === -2
         * -10 >>> 3 === 0b0001111111111111111111111111 1110‬ === 536870910
         * где 0bxxxx - бинарная форма записи двоичного числа xxxx
         */
        console.log(c >> b); // -2
        console.log(c >>> b); // 536870910
    ```

    Подробнее про "побитовые операции https://learn.javascript.ru/bitwise-operators https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"
    и про формы записи чисел "разных разрядов https://learn.javascript.ru/number#shestnadtsaterichnye-dvoichnye-i-vosmerichnye-chisla".

    === Унарные операции
    Мы рассмотрели разные операции с переменными. Однако общее между большинством из них было то, что было только два операнда, 
    с которыми мы работали.

    Однако есть и унарные операции - операции с участием только одного операнда.
    Например typeof, логическое и побитовое НЕ, где мы оперировали только одним операндом, у которого инвертировали значение или биты

    Также есть 

    ```
        var a = 10,
            b = "10",
            c = "10c";

        /**
         * Унарный плюс
         * Преобразовывает строку в число если это возможно
         */
        console.log(+b); // 10
        console.log(+c); // NaN

        /**
         * Унарный минус
         * Также преобразовывает строку в число если это возможно, а также добавляет минус в конце
         */
        console.log(-b); // -10
        console.log(-c); // NaN

        /**
         * Постинкремент
         * Увеличение числа на 1
         * После постинкремента возвращается исходное число
         */
        console.log(a++); // 10
        console.log(a); // 11

        /**
         * Преинкремент
         * Также как и постинкремент увеличивает число на 1
         * После преинкремента возвращается изменённое число
         */
        console.log(++a); // 12
        console.log(a); // 12

        /**
         * Постдекремент
         * Уменьшает число на 1 и по аналогии с постинкрементом возвращает исходное число
         */
        console.log(a--); // 12

        /**
         * Предекремент
         * Уменьшает число на 1 и по аналогии с преинкрементом возвращает изменённое число
         */
        console.log(--a); // 10
    ```

    Важно понимать, что к примеру постинкремент и преинкремент аналогичны операции:

    ``` 
        var a = 10;

        a = a + 1;
    ```

    и разница между ними только в том, какое число будет возвращаться в результате пре- или пост- инкремента.

    Более подробно про "операнды и унарные операции https://learn.javascript.ru/operators https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators#%D0%A3%D0%BD%D0%B0%D1%80%D0%BD%D1%8B%D0%B5_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D1%8B".

    === Неизменность примитивов

    Рассмотрим другую задачу, есть строка и нужно получить значение символа в определённом месте строки, а после заменить его на другой.
    Чтобы получить отдельный символ, можно:

    - использовать метод charAt

    ```
        var str = "тестовая строка";

        console.log(str.charAt(3)); // т
    ```

    - рассмотреть строку как массиво-подобный объект, в котором символы имеют соответствующие числовые индексы:

    ```
        var str = "тестовая строка";

        console.log(str[3]); // т
    ```

    Теперь нужно заменить его значение. Если попытаться сделать через "нотацию" с квадратными скобками:

    ```
        var str = "тестовая строка";

        str[3] = 5;

        console.log(str);
    ```

    то ничего не выйдет, т.к. примитивы в JS неизменны:
    при любой попытке изменения примитива будет возвращаться новое значение, старое же не будет изменено.

    Более подробно об этом можно прочитать "здесь https://www.sitepoint.com/immutability-javascript/"
*/