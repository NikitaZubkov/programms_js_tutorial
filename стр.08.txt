/**
    ====== Объекты, прототипы, контекст исполнения this ======

    === Прототипы, прототипное наследование

    Представим что есть задача создать множество объектов, которые будут между собой отличаться, при этом иметь повторяющиеся методы.
    Будем сохранять объекты в массиве и обращаться к ним из массива:

    ```
    const 
        arr = [],
        N = 10000;

    for(let i = 0; i < N; i++) {
        const obj = {
            test: function() {
                // Код метода
            }
        };

        // ...

        // push - это метод для добавления в конец массива элемента
        arr.push(obj);
    }

    console.log(arr);
    ```

    В результате получили массив с множеством однотипных объектов, которые в дальнейшем будут модифицироваться.
    Однако такое создание объектов с методами не рационально: если отклонить в сторону оптимизацию кода движком JS, то множество 
    однотипных методов у объектов (каждый из которых уникальный объект, а не ссылка на какой-то исходно созданный) должны влиять на затрачиваемое место 
    в памяти.

    Появляются два вопроса:
    1. Как сделать так, чтобы объём занимаемой памяти на созданные объекты был меньше?
    2. Что именно происходит при создании простого объекта или массива и как им изначально доступен ряд методов и полей?

    Ответ кроется в "прототипном наследовании" - это особенность JS, благодаря которой при создании нового объекта он наследует 
    определённые методы и поля от базового объекта. 
    Если у объекта вызывается метод или свойство, то сначала проверяется, есть ли это свойство или метод у текущего объекта.
    Если нет, то это свойство или метод ищется у прототипа. Если у него нет, то у прототипа прототипа и т.д. пока не доходим до базового объекта.
    И если уже там нет, то выводится undefined/ошибка, в зависимости от того что и как мы вызывается.

    При создании простого объекта он наследуется от Object, массив от Array.
    Прототип для текущего объекта можно посмотреть в поле __proto__, в нём хранится ссылка на прототип:

    ```
        const 
            obj = {},
            arr = [];

        console.log(obj.__proto__, arr.__proto__);
    ```

    Более подробно про прототипы и прототипное наследование будет в главе с функциями.

    Ранее при изучении типов данных были рассмотрены не все способы создания объекта.
    Кроме объектного литерала {} и new Object существует вариант Object.create. В этом случае можно указать объект прототип, 
    на который будет ссылаться создаваемый объект:

    ```
        const 
            objProto = {
                a: 12
            },
            objNew = Object.create(objProto);

        console.log(objNew);
    ```

    Второй аргумент для Object.create необязательный, он содержит объект с полями, которые будут в новом обхекте. 
    Правда эти поля должны быть прописаны с так называемыми "дескрипторами свойств", т.е. недостаточно просто указать поле со значением.
    Подробнее про дескрипторы будет ниже.

    Возвращаясь к исходной задаче, достаточно создать объект с полями и методами, от которого будут наследоваться вновь создаваемые объекты:

    ```
    const 
        objBase = {
            test: function() {
                // Код метода
            }
        },
        arr = [],
        N = 10000;

    for(let i = 0; i < N; i++) {
        const obj = Object.create(objBase);

        // ...

        arr.push(obj);
    }

    console.log(arr);
    ```

    Также благодаря Object.create можно создать абсолютно пустой объект, т.к. объект, который не содержит в себе даже свойства __proto__.
    Для этого в качестве прототипа нужно передать null:

    ```
        const obj = Object.create(null);
        console.log(obj);
    ```

    Особенность Object.create является то, что для работы этой фичи в старых браузерах требуется полифилл - кусок js кода, который описывает
    функционал той или иной фичи.

    Подробнее про "объекты, Object.create здесь
        https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/create
        https://www.youtube.com/watch?v=0vs6WkNyzec&t=5s
        https://habr.com/ru/company/ruvds/blog/420615/
        https://habr.com/ru/post/241587/
        https://habr.com/ru/post/240813/
        https://www.sitepoint.com/oriented-programming-1-4/
        "

    === Контекст
    Рассмотрим задачу когда нам нужно сохранять и изменять данные внутри объекта.
    Для этого можно у объекта создать методы, которые будут изменять те или иные поля:

    ```
        const obj = {
            a: null,
            b: null,
            changeA: function(variable) {
                obj.a = variable;
            },
            changeB: function(variable) {
                obj.b = variable;
            }
        };

        obj.changeA(12);
        obj.changeB(12);

        console.log(obj);
    ```

    Однако обращаться к имени объекта не лучший способ чтобы изменить значение поля.
    Для этого можно использовать контекст функции this.

    Контекст this - это объект, описывающий состояние функции в момент вызова this. Под состоянием имеется ввиду доступные поля, значения, сохранённые в функции.
    Значение контекста зависит от того, где был вызван this. Есть три варианта вызова контекста: 
    - вызов в глобальной области видимости
    - вызов внутри метода объекта
    - вызов внутри функции eval

    Последний пункт не будет рассматриваться, т.к. он практически не встречается в коде.
    Сама функция eval - это изначально доступная функция, которая выполняет код, переданный ей в виде строки:

    ```
        eval('console.log(1);');
    ```

    Более подробно про саму функцию "eval https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/eval"

    === Вызов this внутри метода объекта
    Если вызвать this внутри метода объекта, то в this будут доступны поля и другие
    методы объекта:

    ```
        const obj = {
            a: null,
            b: null,
            changeA: function(variable) {
                obj.a = variable;
            },
            changeB: function(variable) {
                obj.b = variable;
            },
            info: function() {
                console.log(this);
            }
        };

        console.log(obj.info());
    ```

    В этом случае мы можем избавиться от обращения к obj для задания полей:

    ```
        const obj = {
            a: null,
            b: null,
            changeA: function(variable) {
                this.a = variable;
            },
            changeB: function(variable) {
                this.b = variable;
            }
        };

        obj.changeA(12);
        obj.changeB(12);

        console.log(obj);
    ```
    
    === Вызов глобального контекста
    Если вызвать this в функции, которая находится в глобальной области видимости, то в this будет сохранён window:

    ```
        function test() {
            console.log(this);
            console.log(this === window);
        }

        test();
    ```

    В данном случае будет true именно потому что в this сохранена ссылка на глобальный объект.

    Ссылки по this:
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/this
    https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0
    https://habr.com/ru/post/464163/
    https://medium.com/better-programming/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8
    https://medium.com/javascript-scene/what-is-this-the-inner-workings-of-javascript-objects-d397bfa0708a
    https://getinstance.info/articles/javascript/execution-context/
    https://stackoverflow.com/questions/9218292/what-is-the-difference-between-this-self-window-and-window-self
    https://ponyfoo.com/articles/where-does-this-keyword-come-from

    === Геттеры, сеттеры

    В предыдущих примерах значения полей объекта изменялись при вызове методов changeA, changeB.
    Есть другой способ модифицировать поля - использовать get/set. Это по сути обычные функции, которые видны в коде как обычные поля:

    ```
        const obj = {
            _a: null,
            get a() {
                return this._a;
            },

            set a(variable) {
                this._a = variable + '12';
            }
        };

        obj.a = 12;

        console.log(obj);
    ```

    Более подробно про "get/set 
    https://learn.javascript.ru/property-accessors
    https://dev.to/ogwurujohnson/getters-and-setters-used-in-javascript-objectshow-4jef"

    === Дескрипторы свойств
    
    Ранее были рассмотрены get/set у объекта. Они являются частью объектов и входят в группу так называемых "Дескрипторы свойств".
    Дескрипторы свойств можно описать как свойства свойств, т.е. они определяют поведение и взаимодействие с каждым свойством.
    Сами по себе они являются объектами.

    В JS есть два типа дескрипторов свойств:
    - Дескриптор данных: они определяют значение, возможность чтения и записи свойств
    - Дескриптор доступа: выше упомянутые get/set

    Важно: одно свойство не может быть описано сразу двумя дескрипторами: либо дескриптор данных, либо доступа.
    Задаются эти дескрипторы через метод defineProperty.

    Пример для дескриптора доступа:

    ```
        const 
            obj = {
                a: 12,
                b: 13
            },
            descriptor = {
                get: function() { return cValue; },
                set: function(newValue) { cValue = newValue + 13; },
                enumerable: true,
                configurable: true
            }

        Object.defineProperty(obj, 'b', {
            get: function() { return bValue; },
            set: function(newValue) { bValue = newValue; },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(obj, 'c', descriptor);

        obj.b = 13;
        obj.c = 13;

        console.log(obj);
        console.log(obj.b);
        console.log(obj.c);
    ```

    Здесь
        - enumerable отвечает за то, будет ли свойство перечисляемым (т.е. будет ли оно выводиться при for...in), по умолчанию false
        - configurable отвечает за то, можно ли свойство удалить через специальный оператор delete (подробно про него ниже),
        по умолчанию значение false

    Т.к. дескрипторы это объекты, то их можно хранить в переменной и использовать в defineProperty в качестве аргумента. 

    В случае задания свойства b через defineProperty оно также будет доступно при прямом вызове, однако при простом выводе объекта оно не будет
    отображаться в консоли.

    Если поле изначально существовало, оно модифицируется согласно прописанным дескрипторам свойств.

    Пример для дескрипторы данных:

    ```
        const obj = {};

        Object.defineProperty(obj, 'a', {
            enumerable: false,
            configurable: false,
            writable: false,
            value: 'static'
        });

        obj.a = 13;

        console.log(obj);
        console.log(obj.a);
    ```
    Здесь
        - value: непосредственное значение поля, по умолчанию undefined
        - writable: статус который показывает, можно ли изменять поле, по умолчанию false 

    Более подробно про дескрипторы "свойств 
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
    https://learn.javascript.ru/property-descriptors
    https://habr.com/ru/company/ruvds/blog/438794/".

    === Оператор delete
    Для удаления свойств в объекте используется специальный оператор delete:

    ```
        const obj = {
            a: 12
        };

        delete obj.a;

        console.log(obj);
    ```

    При работе с ним есть несколько важных моментов. 
    Во-первых, он не может удалить глобальные переменные:

    ```
        var a = 12;

        delete window.a;

        console.log(window.a);
    ```

    Впрочем как и другие переменные, объявленные через let, const, т.к. delete удаляет только конфигурируемые свойства, 
    т.е. те, что были прописали например через объектный литерал {}:

    ```
        const obj = {
            d: 12
        };

        Object.defineProperty(obj, 'd', { configurable: false });

        delete obj.d

        console.log(obj);   // свойство не удалилось из-за свойства configurable:false
    ```

    Во-вторых, delete не удаляет примитивные значения. Он работает только с объектами:

    ```
        const a = 12;

        delete a;

        console.log(a)
    ```

    В-третьих, использование delete с массивами не лучшая идея, т.к. свойство length не будет уменьшено, а в логах на месте элемента будет empty:
    
    ```
        const a = [1,2,3];

        delete a[0];

        console.log(a); 
    ```

    Для удаления элемента в массиве используются определённые методы, о которых будет в главе Массивы.

    В четвёртых, значение, возвращаемое delete:
    - если поле удалено успешно или не найдено, то вернётся true
    - если поле нельзя удалить, то вернётся false

    ```
        const 
            a = 12, 
            b = {
                c: 13,
                d: 14
            };

        Object.defineProperty(b, 'd', { configurable: false });

        console.log(delete a);      // false
        console.log(delete b.c);    // true
        console.log(delete b.d);    // false
    ```

    Более подробно про delete можно прочитать "здесь
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete
    https://medium.com/better-programming/javascript-delete-keyword-in-detail-4bdcf32dcdd8
    https://blog.bitsrc.io/understanding-the-delete-operator-in-javascript-3791ba6f3a08
    https://blog.caplin.com/2012/01/31/javascript-is-hard-part-3-you-cant-delete-with-delete/
    "

    === Частный случай сложения массивов и объектов, изменение базового объекта

    В одной из прошлых глав были рассмотрены арифметические операции над разными типами данных, а также было рассмотрено приведение
    типов данных. 

    Рассмотрим частный случай, связанный с арифметическими операциями у объекта и у массива.
    Допустим есть функция, которая принимает на вход два аргумента и возвращает их суммы.
    Передадим в эту функцию объект с числом, массив с числом и объект с массивом:

    ```
        function sum(a, b) {
            return a + b;
        }

        const
            obj = {
                c: 12
            },
            arr = [1, 2, 3],
            variable = 13;

        // Случай №1 - [object Object]13
        console.log(sum(obj ,variable));

        // Случай №2 - 1,2,313
        console.log(sum(arr, variable));

        // Случай №3 - [object Object]1,2,3
        console.log(sum(obj, arr));
    ```

    В случае со сложением объекта и любого другого типа данных получаем [object Object].
    А в случае с массивом - строку с элементами через запятую.

    Это происходит из-за особенностей работы методов valueOf и toString при операции сложения.
    Когда складывается объект и какой либо примитив, происходит неявное приведение типов, объект приводится к определённому типу данных.

    В этом случае если у объекта есть метод valueOf, то используется значение, которое возращается этим методом.
    Если его нет, то проверяется, есть ли метод toString у объекта. Если он есть, то используется его возвращаемое значение.

    У объекта по умолчанию нет метода valueOf, toString. И он как раз возвращает строку со всеми хранимыми значениями для массива и
    [object Object] у объекта. object здесь говорит что тип данных объект. Object же говорит что это именно объект, а не Function, Array и т.д.

    Продолжая задачу, можно добавить в Object метод valueOf, который будет возвращать определённое число:

    ```
        Object.prototype.valueOf = function() {
            return 1;
        };

        const 
            obj = {foo: "bar },
            obj2 = {baz: "foobar"};

        // Результат: 2
        console.log(obj + obj2);
    ```

    Аналогичным образом можно добавить любой другой метод и его может использовать любой новый объект:

    ```
        Object.prototype.test = function(a) {
            return a + 42;
        };

        const obj = {};

        console.log(obj.test(12));
    ```

    https://habr.com/ru/company/ruvds/blog/347866/
    https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong

    === Изменчивать объектов, клонирование объектов

    Как уже было сказано ранее, при присваивании переменной с объектом другой переменной происходит не 
    копирование объекта, а передача ссылки на объект.

    Появляется вопрос, как полностью скопировать весь объект?

    Есть несколько вариантов. 
    
    Первый вариант - самый очевидный, перебрать каждый элемент и добавить его в новый объект:

    ```
        const 
            obj1 = {
                a: 12, 
                b: 13
            },
            obj2 = {};

        for (let key in obj1) {
            obj2[key] = obj1[key];
        }

        obj1.a = 42;

        console.log(obj2);
    ```

    В этом случае обеспечивается полное копирование и по сути это единственный способ сделать полное копирование всех полей.
    При этом часто данные хранят в себе несколько уровней вложенности объектов и массивов.
    Поэтому нужно либо писать своё решение, либо использовать библиотеки типа lodash с реализованными в них методами для копирования объектов.

    Второй вариант - использовать Object.assign. 
    Это вариант неглубокого копирования, когда вложенные объекты не будут скопированы. Вместо них будет ссылка на эти объекты.
    В Object.assign через запятую передаются объекты, которые объединяются с первым переданным объектом.
    После возвращается новый объект. Однако первый переданный объект будет тоже изменён:

    ```
        const 
            obj1 = { a: 12 },
            obj2 = { b: 13 },
            obj3 = { c: 14 };

        const newObj1 = Object.assign({}, obj1, obj2, obj3);

        obj1.a = 42;
        console.log(newObj1);

        const newObj2 = Object.assign(obj1, obj2, obj3);
        console.log(newObj2, obj1);
    ```

    Один из недостатков Object.assign: он копирует только перечисляемые и собственные свойства.
    Т.е. если создать свойство у объекта через дескриптор свойств и указать поле не перечисляемым, то его не будет в новом объекте:

    ```
    // Пример взят из документации Mozilla
    const 
        obj = Object.create({ foo: 1 }, { // foo является унаследованным свойством.
            bar: {
                value: 2  // bar является неперечисляемым свойством.
            },
            baz: {
                value: 3,
                enumerable: true  // baz является собственным перечисляемым свойством.
            }
        });

    const copy = Object.assign({}, obj);
    console.log(copy); // { baz: 3 }
    ```

    Третий вариант: JSON.parse(JSON.stringify(object))
    JSON - это формат обмена данными. Он произошёл из JS но при этом может использоваться в других языках программирования.
    По сути - это обычный объект, который может в себе содержать строки, массивы и объекты.

    Для работы с JSON в JS есть одноимённый объект, у которого есть два главных метода:
    - parse: преобразование JSON строки (формата '{ "a": "test" }') в объект
    - stringify: обратная операция, преобразование объекта в JSON-строку

    И вот для глубокого копирования можно использовать комбинацию этих методов:

    ``` 
        const obj = { 
            a: 12,
            b: { 
                c: 42
            }
        }

        const newObj = JSON.parse(JSON.stringify(obj));

        obj.b.c = 20;
        console.log(obj);
        console.log(newObj);
    ```

    Недостатком такого метода является то, что он работает только с JSON-объектами и строками. 
    Если в объекте будут методы, то копирование будет реализовано, однако в новом объекте не будет методов:

    ``` 
        const obj = { 
            a: 12,
            b: { 
                c: 42
            },
            d: function () {
                console.log(1);
            }
        }

        const newObj = JSON.parse(JSON.stringify(obj));

        obj.b.c = 20;
        console.log(obj);
        console.log(newObj);
    ```

    Более подробно про изменчивость "объектов 
    https://2ality.com/2019/10/shared-mutable-state.html
    https://medium.com/@stasonmars/%D0%BA%D0%BE%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2-%D0%B2-javascript-d25c261a7aff
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
    https://ru.stackoverflow.com/questions/540073/%D0%9A%D0%BE%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%B0-%D1%81-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%83%D1%8E%D1%89%D0%B8%D0%BC-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%D0%BC
    https://medium.com/better-programming/3-ways-to-clone-objects-in-javascript-f752d148054d
    https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object
    https://medium.com/@stasonmars/%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-json-c798d2723107
    "

    === Перебор объекта, особенность for...in

    Для перебора объекта можно использовать два способа:
    - получить все в поля через Object.keys() и через цикл пройти по всем полям
    - использовать for...in

    1. Перебор объекта с помощью Object.keys()
    В случае с Object.keys() передаётся объект, а возвращается массив со всеми полями:

    ```
        const 
            obj = {
                a: 12,
                b: 13
            },
            keys = Object.keys(obj),
            countKeysObject = keys.length;

        for (let i = 0; i < countKeysObject; i++) {
            let itemKeys = keys[i],
                itemObj = obj[itemKeys];

            console.log(itemKeys, itemObj);
        }
    ```

    В более сокращённом варианте можно использовать метод для обхода цикла forEach:

    ```
        const 
            obj = {
                a: 12,
                b: 13
            };
            
        Object.keys(obj).forEach(function(key) {
            console.log(key, this[key]);
        }, obj);
    ```

    Здесь первым аргументом является так называемый callback - функция, которая будет вызываться при каждой итерации.
    Второй аргумент это значение (чаще всего объект), который будет использоваться в качестве this.
    
    В данном случае в качестве this будет выступать объект obj.

    Более подробно про Object.keys можно прочитать "здесь
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
    https://ru.stackoverflow.com/questions/574461/%D0%9A%D0%B0%D0%BA-%D0%BF%D0%B5%D1%80%D0%B5%D0%B1%D1%80%D0%B0%D1%82%D1%8C-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%B0
    "

    2. Перебор объекта с помощью for...in
    Здесь гораздо проще, т.к. for...in по синтаксису похож на обычный for:

    ```
        const 
            obj = {
                a: 12,
                b: 13
            };

        for (let key in obj) {
            let valObj = obj[key];

            console.log(key, valObj);
        }
    ```

    Однако у for...in есть особенность при переборе свойств: он перебирает не только свойства у самого объекта, но и поля у 
    объекта-прототипа:

    ```
        const 
            objParent = {
                a: 12,
                b: 13
            },
            newObj = Object.create(objParent);

        newObj.c = 12;

        for (let key in newObj) {
            let valObj = newObj[key];

            console.log(key, valObj);
        }
    ```

    Чтобы перебрать свойства объекта, а не его прототипа, нужно изначально доступный метод hasOwnProperty:

    ```
        const 
            objParent = {
                a: 12,
                b: 13
            },
            newObj = Object.create(objParent);

        newObj.c = 12;

        for (let key in newObj) {
            if (newObj.hasOwnProperty(key)) {
                let valObj = newObj[key];

                console.log(key, valObj);
            }
        }
    ```

    Однако может быть так, что в этом объекте уже есть метод hasOwnProperty и в этом случае именно он будет вызываться.
    Чтобы не было подобного, нужно вызывать метод через свойство prototype у конструктора Object:

    ```
        const 
            objParent = {
                a: 12,
                b: 13
            },
            newObj = Object.create(objParent);

        newObj.c = 12;

        for (let key in newObj) {
            if (Object.prototype.hasOwnProperty.call(newObj, key)) {
                let valObj = newObj[key];

                console.log(key, valObj);
            }
        }
    ```

    Подробнее про call будет рассказано в следующей главе про функции. Но забегая вперёд, call позволяет вызвать функцию
    с новым контекстом, который передаётся в качестве первого аргумента. В нашем случае this является новый объект newObj
    и идёт проверка, есть ли поле key в контексте newObj.

    Более подробно про "for...in
    https://learn.javascript.ru/object#tsikl-for-in
    https://eslint.org/docs/rules/guard-for-in
    "

    === !!!Базовые и основные методы при работе с объектами

 */