/**
    ====== Функции, конструкторы, прототипы ======

    Рассмотрим более подробно функции, чем они являются и чем принципиально отличаются от объектов.
    Как уже ранее было сказано, в JS все типы данных делятся на примитивы и объекты.

    Сама по себе функция - это тоже объект. Однако функция является специальным типом объектов, благодаря которому можно 
    сохранять определённую логику программы и воспроизводить её в нужном месте.

    У функций в JS есть особенность - их можно назвать так называемыми первоклассными функциями (или функциями первого класса).
    Т.е. функции можно сохранить в переменную, их можно передать в качестве аргумента и они же могут возвращать другие функции:

    ```
        /** 
         * Создаём функцию, у которой аргументом является другая функция f
         * возвращаем результат вызова переданной функции f
         * у которой аргумент - число 12
         */
        function test(f) {
            return f(12);
        };

        // Сохраняем функцию в переменную func
        const func = function(variable) {
            return variable + 42;
        };

        /** 
         * В test передаём функцию func
         * эта функция вызывается внутри test
         * ей передаётся число 12, которое складывается с 42
         * результат сложения 54 возвращается из func в test
         * а test в свою очередь возвращает 54, который выводится в console.log
         */
        console.log(test(func));
    ```

    Более подробно про первоклассные функции можно прочитать "здесь
    https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/First-class_Function
    https://medium.com/launch-school/javascript-weekly-an-introduction-to-first-class-functions-9d069e6fb137
    https://medium.com/webbdev/func-1afa4a8220a7
    "

    === Классификация функций, способы создания функций

    Функции можно разделить на два типа:
    - анонимные функции, у которых отсутствуют имена 
    - именнованные функции 

    ```
    // Пример именованной функции №1
    function NameFunc1() {}

    // Пример именованной функции №2
    const test = function NameFunc2() {}

    // Пример анонимной функции
    const test2 = function() {}
    ```

    Важное замечание: по возможности лучше добавлять имена функций вне зависимости от того,

    Также можно выделить некоторые варианты функций:

    1. Рекурсивные функции
    Это обычные функции, которые сами себя вызывают при определённом условии. 
    Например, есть задача реализовать функцию для вычисления факториала !n, 
    который равен произведению всех целых чисел от 1 до n:

    ```
        function factorial(value) {
            return (value !== 1) ? (value * factorial(value-1)) : 1;
        };

        // Второй вариант функции, ничем не отличается от первого
        // const factorial = function fact(value) {
        //     return (value !== 1) ? (value * fact(value-1)) : 1;
        // }


        console.log(factorial(4)); // 24
    ```

    Алгоритм здесь следующий:
    1. Вызов factorial №1. Передано 4, 4 не равен 1, 4 умножается на результат нового вызова factorial(3)
    2. Вызов factorial №2. Передано 3, 3 не равно 1, 3 умножается на результат нового вызова factorial(2)
    3. Вызов factorial №3. Передано 2, 2 не равно 1, 2 умножается на результат нового вызова factorial(1)
    4. Вызов factorial №4. Передано 1, 1 равна 1, в вызов factorial №3 возвращается 1
    5. 1 из вызова factorial №4 умножается на 2 в вызове factorial №3, 2 возвращается в вызов factorial №2
    6. 2 из вызова factorial №3 умножается на 3 в вызове factorial №2, 6 возвращается в вызов factorial №1
    7. 6 из вызова factorial №2 умножается на 4 в вызове factorial №1, 24 возвращается в console.log
    8. в лог выводится 24

    Более подробно про рекурсивные функции можно прочитать "здесь
    https://learn.javascript.ru/recursion
    https://code.tutsplus.com/ru/tutorials/understanding-recursion-with-javascript--cms-30346
    https://habr.com/ru/post/337030/
    https://ru.stackoverflow.com/questions/622397/javascript-%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F
    "

    2. Самовызывающиеся функции 
    Самовызывающиеся (или немедленно вызвающиеся) функции, они же IIFE - это те же анонимные или именованные функции, 
    которые могут вызвать сами без отдельного вызова:

    ```
        // Пример №1
        (function() {
            console.log("start IIFE №1");
        })();

        // Пример №2
        (function test() {
            console.log("start IIFE №2");
        }());
    ```

    IIFE могут быть как анонимными, так и именованными.
    В эти функции также как и в обычные можно передавать аргументы:

    ```
        const a = (function test(b, c) {
            return b + c;
        }(1, 2));
    ```

    Более подробно про "IIFE 
    https://getinstance.info/articles/javascript/immediately-invoked-function-expressions/
    "

    3. Стрелочные функции

    Стрелочными называют анонимные функции с сокращённым синтаксисом:

    ```
        /**
         * Вариант стрелочной функции №1
         * Ключевое слово function опускается и после () добавляется ()
         */
        const func = (a) => {
            return a + 12;
        };


        /**
         * Вариант стрелочной функции №2
         * В этом случае указывается один аргумент, опускаются () и {}
         * выражение после => это return результата написанного выражения
         */
        const func = a => a + 12;
    ```

    У этих функций есть две главные особенности.

    1) Особенность this
    

    4. 



   - способы создания функций, arguments

   - объяснение конструктора

   - замыкания
   
   - callback

   - call, apply, bind
   
   - потеря контекста вызова

   https://ru.stackoverflow.com/questions/535030/%D0%9F%D0%BE%D1%82%D0%B5%D1%80%D1%8F-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0


    https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Functions

*/