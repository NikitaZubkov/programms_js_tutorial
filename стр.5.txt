/**
    ====== Условия ======
    
    Допустим при написании скрипта нам нужно выполнять определённый кусок кода при каком либо условии: существование переменной,
    определённый тип данных у переменной, определённое значение и т.д.

    Для этого существуют конструкции-условия:
    - if-else
    - switch

    Эти конструкции не уникальны и они используются также в других языках программирования. 
    При этом логика их работы не отличается логики работы в других языках.

    === if-else:
    Самый простой и универсальный способ написать условие в коде - это использовать if-else.
    Его синтаксис состоит из зарезервированного слова if, условия, оборачиваемого в () и тело условия, которое указывается в {}:

    ```
    if (Условие_1) {
        // Тело if, в которое попадаем, если Условие_1 === true
        ...
    } else if (Условие_2) {
        // Тело if, в которое попадаем, если Условие_2 === true, а Условие_1 === false
        ...
    } else {
        // Тело if, в которое попадаем, если Условие_1 === false и Условие_2 === false
        ...
    }
    ```

    Условием может быть что угодно: переменная, результат арифметической, логической и пр. операций и т.д.
    Напомним, что false в условии считается:
    - 0
    - undefined
    - false
    - ""
    - null
    - NaN

    Всё остальное для условия - это true. Даже пустой массив или объект.

    === switch
    В switch (в отличие от if) указывается не условие, а переменная и далее через case указывается конкретные значения: 

    ```
    switch (Переменная) {
        case Значение_1: {
            ...
            break;  // указывает, что тело в нашем case закончено
        }
        case Значение_2: // мы можем не использовать {} для разграничения тела каждого case
            ...
            break;
        default: // попадаем в default, если не попали ни в один case
            ...
    }
    ```

    Если break в каком-то case будет пропущен, то после попадания в case мы 
    выполним не только тело в нашем case, но и во всех остальных ниже до тех пор, пока не встретим break:

    ```
    var a = 10;

    switch (a) {
        case 1: {
            console.log(1);
        }
        case 10:
            console.log(2);
        case 11:
            console.log(3);
        default:
            console.log(4);
    ```

    В лог будут выведены числа 2, 3, 4.
    
    Примеры использования условий:
    ```
    var a = 10;

    // Если у нас только одна строка кода, можно не указывать {}
    if (a)
        console.log("Лог if №1");

    if (a && (a === 12)) {
        console.log("Лог if №2");
    } else {
        console.log("Лог if-else №3");
    }

    if (a && (a === 12)) {
        console.log("Лог if №4");
    } else if (a && (a === 10)) {
        console.log("Лог if-else-if №5");
    } else {
        console.log("Лог if-else №6");
    }

    switch (a) {
        case 9:
            console.log("Лог switch №1");
            break;
        case 10:
            console.log("Лог switch №2");
            break;
        default: 
            console.log("Лог switch №3");
    }

    Также существует сокращённая версия if-else - тернарный оператор:

    (Условие) ? Выражение_1 : Выражение_2

    Например: 
    ```
    var a = 10;

    /**
     * Проверяем, является ли a строкой
     * Если это строка, выводим в лог, что a - строка
     * В противном случае выводим объединение строк "Переменная a - " и строки, возвращаемой после операции (typeof a)
     */
    (typeof a === "string") ? console.log("Переменная a - строка") : console.log("Переменная a - " + (typeof a));
    ```
*/