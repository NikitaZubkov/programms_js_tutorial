/**
    ====== Массивы ======

    === Перебор массивов

    Для перебора массивов есть несколько вариантов:
    1) for-of и классический перебор через for/while/do-while

    for-of появился в ES6 и представляет собой синтаксический сахар над for:

    ```
        const 
            arr = [11, 12, 13],
            lengthArr = arr.length;

        // Стандартный вариант с перебором массива через for
        for (let i = 0; i < lengthArr; i++) {
            let item = arr[i];

            console.log(item);
        }

        // Тот же перебор, но уже с for...of
        for (let item of arr) {
            console.log(item);
        }
    ```

    2) Использование for...in

    Перебор for...in чаще всего используется для обычных объектов. 
    Однако к массивам он также применим, при таком переборе создаётся переменная-ключ (индекс элемента), через которую 
    уже можно обратиться к конкретному значению в массиве:

    ```
        const arr = [11, 12, 13];  

        for (let key in arr) {
            let item = arr[key];

            console.log(key, item);
        }
    ```

    3) forEach

    forEach - это встроенный метод перебора массива, очень похож по логике на for...of:
    
    ```
        const arr = [11, 12, 13];  

        arr.forEach((val, i) => console.log(val));
    ```

    По ананогии с for...of у forEach может не быть поддержки в той или иной версии браузера. Поэтому для этого перебора 
    есть "полифилл
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill
    "

    Особенностью forEach является то, что он изменяет исходный массив:

    ```
        const arr = [11, 12, 13];  

        arr.forEach((val, i) => { 
            return arr[i] = val * 2; 
        });
    ```

    Более подробно про плюсы и минусы переборов массивов "здесь
    http://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript.html
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
    https://fooobar.com/questions/355330/difference-between-foreach-and-for-loop-in-javascript
    https://stackoverflow.com/questions/31399411/go-to-next-iteration-in-javascript-foreach-loop
    "

    === Методы для работы с массивами

    При работе с массивами кроме перебора значений и их измения используются различные методы от сортировки 
     до генерации нового массива с предварительным заполнением данными. Рассмотрим наиболее используемые методы:

    1) push/pop/shift/unshift

    Эти методы нужны для добавления/удаления элементов:

    ```
        let arr = [1, 2, 3, 4, 5];

        // Добавление в конец нового элемента
        console.log( arr.push(6) );
        
        // Удаляет последний элемент массива
        console.log( arr.pop() );

        // Удаляет первый элемент массива
        console.log( arr.shift() );

        // Добавляет в начало массива новый элемент
        console.log( arr.unshift(6) );
    ```

    Важно: pop/push оперируют последним элементом в массиве, поэтому это не затратные по ресурсам операции.
    Однако shift/unshift не только добавляют первый элемент, но и производят переиндексацию элементов массива.
    Если массив значителен по размерам, то это крайне затратные операции.

    2) concat

    Чтобы объединить два массива в один в js есть несколько вариантов:
    - пройтись циклом и добавить в новый массив значения двух других
    - использовать метод concat:

    ```
        const 
            arr1 = [1, 2, 3],
            arr2 = [4, 5, 6],
            arr3 = arr1.concat(arr2);

        console.log(arr3);
    ```

    Плюсом этого метода является то, что он относится к стандарту ES5.
    Если же в проекте можно поддерживать ES6+ или код преобразовывается в ES5, то вместо concat используется spread 
    оператор:

    ```
        const 
            arr1 = [1, 2, 3],
            arr2 = [4, 5, 6],
            arr3 = [...arr1, ...arr2];

        console.log(arr3);
    ```

    Подробнее про concat "здесь
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/concat
    http://jsraccoon.ru/es6-spread-rest
    "

    3) splice/slice/split

    Эти методы легко спутать, однако они отвечают за принципиально разные вещи.

    split это метод конструктора String и он позволяет преобразовать строку в массив:

    ```
        const str = 'Тестовая строка с некой информацией';

        /**
         * Передаём в split символ-разделить, по которому строка будет разбиваться на элементы массива
         * В данном случае символ-разделитель - это пробел
         */
        const arr = str.split(' ');
    ```
    
    slice позволяет вернуть копию исходного массива, при этом не внося изменения в него:

    ```
        const arr = [0, 1, 2, 3, { a: {b: 12}}];

        const
            newArr1 = arr.slice(1, 3),
            newArr2 = arr.slice(1, ),   // копируем все значения с индекса 1 и до последнего элемента
            newArr3 = arr.slice(0, -1); // копируем элементы с 0 и до первого элемента с конца

        console.log(newArr1);
        console.log(newArr2);
        console.log(newArr3);
    ```

    Важно: при изменении у исходного массива вложенных объектов, эти же изменения будут в новых массивах:

    ```
        const arr = [0, 1, 2, 3, { a: {b: 12}}];

        const newArr = arr.slice(1, 3);

        arr[4].a = 12;

        console.log(arr);
        console.log(newArr);
    ```

    splice позволяет удалять элементы и заменять их новыми:

    ```
        const arr = [0, 1, 2, 3];

        // Удаляются все элементы из исходного массива и сохраняются в новый
        //const newArr1 = arr.slice(0, );

        // Из исходного массива вырезаются элементы с 1 индекса по 3 и сохраняются в новый
        //const newArr2 = arr.slice(1, 3);

        /**
         * Из исходного массива вырезаются элементы с 1 индекса по 3 и сохраняются в новый
         * На их месте вставляются строки 'n' и '2'
         */
        const newArr3 = arr.slice(1, 3, 'n', '2');

        console.log(arr, newArr3);
    ``` 

    Подробнее про эти методы "здесь
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/split
    "

    4) filter/find/some/every 

    Эти методы принимают в качестве аргумента callback функцию и выполняют задачи с поиском и фильтрацией данных:

    ```
        var arr = [1, 2, 3, 4, 5];

        /**
         * Возвращается первый элемент, удовлетворяющий указанному условию
         * В данном случае возвращается первый элемент, который больше 2
         */
        arr.find(val => val > 2);

        // Возвращается true/false если хоть один элемент удовлетворяет указанному условию
        arr.some(val => val > 6);

        // Возвращается true/false если все элементы удовлетворяют указанному условию
        arr.every(val => val > 3);

        // Возвращается новый массив, значения в котором удовлетворяют условию в filter
        const newArray = arr.filter(val => val > 3);
    ```

    Подробнее про эти методы "здесь
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/find
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/some
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/every
    https://medium.com/poka-techblog/simplify-your-javascript-use-some-and-find-f9fb9826ddfd
    "

    5) sort

    Данный метод принимает необязательный параметр - callback функцию, с помощью которой будут сортироваться элементы.
    Если её не указать, то все элементы будут приводиться к строкам и сравнение будет строк, а не чисел:

    ```
        const arrBase = [0, 3, 1, 5, 12, 2, 14];
        
        arrBase.sort();
    ```

    Чтобы отсортировать числа в порядке возрастания, нужно передать callback функцию:

    ```
        const arrBase = [0, 3, 1, 5, 12, 2, 14];
        
        arrBase.sort((a, b) => a - b);
    ```

    Логика здесь следующая:
    - если разница a-b отрицательная, то a будет раньше b
    - если положительная, то b будет раньше a
    - если будет 0, то порядок не поменяется
    

    Подробнее про метод "sort и другие варианты сортировок
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
    https://www.freecodecamp.org/forum/t/arr-sort-a-b-a-b-explanation/167677
    https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D1%83-%D0%B2-javascript-%D0%BF%D1%80%D0%B8-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8-sort-d492c97ccfdf
    https://medium.com/@PurpleGreenLemon/demystifying-the-mysteries-of-sort-in-javascript-515ea5b48c7d
    "

    6) reduce

    Этот метод позволяет выполнить операции с каждым элементом в массиве и вернуть результат работы, например сложение:

    ```
        const arr = [1, 2, 3, 4];

        arr.reduce((accumulator, currentValue) => accumulator + currentValue);
    ```

    где accumulator - результат операции предыдущих элементов. При первой итерации равен первому элементу.

    У reduce может не быть поддержки в старых браузерах, поэтому для него существует "полифилл
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Polyfill
    "

    Более подробно про reduce "здесь
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
    https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-reduce-%D0%B2-javascript-%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%B5%D0%B3%D0%BE-%D0%BD%D1%83%D0%B6%D0%BD%D0%BE-%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D1%8F%D1%82%D1%8C-%D0%B8-%D0%BA%D0%B0%D0%BA%D0%B8%D0%B5-%D0%BA%D1%80%D1%83%D1%82%D1%8B%D0%B5-%D0%B2%D0%B5%D1%89%D0%B8-%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE-%D1%81-%D0%BD%D0%B8%D0%BC-b650c397bee6
    "

    7) map

    Для того чтобы лучше разобраться в данном методе, сравним его с forEach.
    .forEach() выполняет переданную в него callback функцию для каждого элемента, при этом изменяя изначальный массив. 
    
    .map() также выполняет callback функцию для каждого элемента, но при этом возвращает новый массив с новыми изменёнными элементами,
    не затрагивая исходный массив:

    ```
        const 
            arrForEach = [1, 2, 3],
            arrMap = [1, 2, 3];

        arrForEach.forEach((val, i) => val * 2);
        const newArr = arrMap.map((val, i) => val * 2);

        console.log(arrMap, newArr);
    ```

    Подробнее про map "здесь
    https://codeburst.io/javascript-map-vs-foreach-f38111822c0f
    "

    8) flat

    Рассмотрим задачу когда есть массив с вложенными массивами и нужно превратить многоуровневый массив в обычный массив 
    (иначе говоря развернуть массив массивов). Одним из вариантов решения этой задачи является использование reduce и concat:

    ```
        const arr = [[0, 1], [2, 3], [4, 5]];

        const newArr = arr.reduce((concatArr, currentArr) => concatArr.concat(currentArr));
    ```

    Т.е. каждый новый массив при каждой итерации объединяется с результатом объединения других массив.
    Результат reduce сохраняется в переменную newArr.

    Если же появляется больше уровней вложенности, то ждя сокращения кода можно использовать метод .flat():

    ```
        const arr = [[0, 1], [2, 3], [4, 5, [6, 7, 8]]];

        const newArr = arr.flat(2);
    ```

    где 2 - уровень нужной нам вложенности. Если изначально неизвестно количество уровней вложенности, то можно использовать Infinity:

    ```
        const arr = [[0, 1], [2, 3], [4, 5, [6, 7, 8]]];

        const newArr = arr.flat(Infinity);
    ```

    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/flat

    9) fill 

    Рассмотрим задачу, когда нужно сгенерировать массив с заранее заполненными однотипными данными.
    Это можно сделать простой генерацией массива и добавлением элементов через push в цикле:

    ```
        const 
            arr = [],
            sizeArr = 10;

        for (let i = 0; i < sizeArr; i++) {
            arr.push(null);
        }

        console.log(arr);
    ```

    Однако эту же операцию можно сделать через метод fill:

    ```
        // Создаём массив длиной 10 символов и заполняем их null
        const arr = new Array(10).fill(null);
    ```

    Однако у этого метода есть недостаток: если нужно заполнять значения массива не примитивами, а например объектами, то они будут ссылками
    на один и тот же объект:

    ```
        const arr = new Array(10).fill({});

        arr[0].a = 12;

        console.log(arr);
    ```

    Чтобы исправить это существует несколько вариантов, одним из которых является заполнение массива undefined, 
    а после изменение элементов через map:

    ```
        const arr = new Array(10).fill().map(Object);

        arr[0].a = 12;

        console.log(arr);
    ```

    Более подробно про fill можно прочитать "здесь:
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
    https://stackoverflow.com/questions/35578478/array-prototype-fill-with-object-passes-reference-and-not-new-instance
    "

    Разумеется это не все методы у массивов, более подробно про остальные методы, а также про перечисленные
    можно прочитать "здесь
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods
    https://dev.to/rebeccauranga/10-array-methods-you-should-know-nn5
    https://medium.com/@olga.myazina/5-%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%BE%D0%B2-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2-%D0%B2-javascript-602dc27fd20
    https://medium.com/@PurpleGreenLemon/demystifying-the-mysteries-of-sort-in-javascript-515ea5b48c7d
    https://css-tricks.com/an-illustrated-and-musical-guide-to-map-reduce-and-filter-array-methods/
    https://habr.com/ru/company/ruvds/blog/430380/
    "
*/