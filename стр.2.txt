/**
    ====== Введение ======

    Мы не будем подробно останавливаться на истории появления JS и этапах его развития до появления общепринятых стандартов. 
    Более подробная история рассмотрена в статье на "Хабрахабр https://habr.com/ru/company/livetyping/blog/324196/"
    Скажем лишь то, что изначально этот язык предназначался для добавление динамики  
    в web-страницах и не предполагалось, что на основе этого языка будут создаваться сложные архитектурные решения 
    современных задач в web-приложениях. 
    Если ранее js предназначался для добавления анимации, простой логики обработки форм, то сейчас с помощью js можно построить web-приложение со сложной 
    логикой, сложными анимациями, сменой контента без перезагрузки страницы и т.д.
    Более подробно про сайты, браузер и пр. будет ниже в этой главе.

    Рассмотрим более подробно js, на базе чего он построен, где используется и как развивается.

    Как было кратко упомянуто выше, JS - это так называемое расширение языка ECMAscript. 
    Документ, описывающий этот язык размещён на сайте компании "ECMA http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf"
    Работа JS, его основные конструкции и приципы работы базируются на этом документе.

    Сам язык развивается и каждый год выходят новые редакции стандарта ECMAScript, обозначабщиеся сокращённо ES с номером версии. 
    Например ES5, вышедшая в 2009 году. По сути начиная с ES5 начинается история современного JS, т.к. именно с этой редакции JS приобрёл единый
    поддерживаемый стандарт. Далее появились ES6 в 2015 г. и так далее ES7, 8, ...
    Важно понимать, что каждый стандарт привносит новые фичи и возможности в ECMAScript, а следовательно и в JS. Однако это всё же фичи ECMAScript, и они
    не обязательно сразу будут внедряться в JS. 
    
    Дело в том что за то как будет работаь и функционировать js отвечает так движок js. Это специальная программа, используемая в браузере и отвечающая за обработку, проверку,
    исполнение и оптимизацию входящего кода. Таких движков существует несколько и разные браузеры могут иметь разные движки, а следовательно и разные подходы 
    при обработке js. При этом они базируются на документе ES, следовательно код, написанный для одного браузераЮ должен работать в других браузерах.
    При условии что браузер реализовал у себя фичи и конструкции, которые используются в коде. К счастью такие сложности появляются только в самых 
    последних редакциях ES. И то в течение нескольких месяцев после выхода новой редакции. Однако даже если фича не реализована в браузере, существуют 
    способы обхода данной проблемы. Например, для конкретной фичи может существовать так называемый полифилл. Это обычный js, который повторяет функционал 
    ещё не внедрённой фичи.
    
    Появляется вопрос, как исполняется JS и в чём сходство и отличие с другими языками программирования.
    Для этого нужно разобраться на какие условные категории можно разделить все языки программирования. Для упрощения рассмотрим разделение языков 
    программирования по двум факторам:
    - по уровню абстракции языка
    - по способу трансляции кода

    По уровню абстракции. 
    Языки программирования можно разделить на несколько уровней: 
    - язык низкого уровня: это машинный язык, который может прочитать и исполнить процессор
    - язык среднего уровня: это ассемблер, который был придуман в 60-х для упрощения программирования. 
    Этот язык процессор также может прочитать и исполнить процессор.
    - языки высокого уровня: это большинство языков программирования, с которыми мы сейчас работаем. 
    Однако код, написанный на этих языках, процессор уже не может прочитать и исполнить
    без преобразования в машинный язык или ассемблер. По сути каждая команда, написанная на языке высокого уровня, ведёт за собой множество других
    более низкоуровневных команд, которые процессор читает и исполняет. И вот для преобразования высокоуровнего кода используется транслятор.

    По способу трансляции кода
    Транслятор - программа для преобразования входящего кода в ассемблер или машинный язык. 
    Наиболее распространёнными типами трансляторов являются компилятор и интерпретатор. 
    - Компилятор преобразовывает входящий код в низкоуровневый код или в обхектные файлы (Ваш код преобразованный в ассемблер), который далее передаётся процессору.
    Наиболее ярким примером языка, который использует компилятор и является компилируемым - это C++;
    - Интерпретатор же считывает каждую строку, преобразовывает её в ассемблер и передаёт процессору. 
    Примером интерпретируемого языка является JavaScript

    Основные отличия таких трансляторов в скорости чтения кода и кроссплатформерности: 
    - код, преобразованный компилятором, быстрее будет прочитан процессором, т.к. весь файл с кодом оптимизируется и сразу преобразовывается в промежуточные файлы, которые передаются в процессор.
    В этом случае с одной стороны нам не нужен компилятор - достаточно иметь скопилированный код. 
    С другой стороны этот код зависит от ОС: программа, скомпилированная на Linux не будет работать на Windows. 
    - код, читаемый интепретатором, будет медленнее доставляться и обрабатываться процессором, т.к. будет считываться с каждой строкой.
    При этом исчезает проблема с кроссплатформерностью. Однако обязательным условием преобразования кода является наличие интерпретатора.

    Возвращаясь к браузерам и их движкам, чаще всего для трансляции JS используется связка интерпретатора и компилятора.
    Первоначально код транслируется через интерпретатор, а далее если какие-либо участки кода регулярно выполняются, они сначала проходят через компилятор,
    которые оптимизирует и преобразует в так называемый байт код, а далее уже полученный байт код читается и исполняется процессором.

    Использование JS в Web.
    Остановимся более подробно на том, что из себя представляет браузер, сайт и ранее упоминаемое web-приложение.

    Браузер - это программа, предназначенная для выполнения двух главных задач: 
    - связывание пользователя с сетью, обеспечивая возможность получить информацию с серверов для открытия сайтов и страниц на них
    - отрисовывание страниц сайта по полученным с сервера статическим файлам.
    Сервер - по сути обычный компьютер, только лишённый привычного GUI-интерфейса и заточенный под обработку входящих/исходящих запросов.

    Сайт - это набор статических файлов (статика), размещённых на сервере. Самыми главными файлами статики являются: 
    - .html файлы, отвечающие за структуру открытой страницы
    - .css файлы, отвечающий за внешний вид, за то, как отрисуется страница браузером
    - .js файлы
    
    Также существует множество других файлов статики таких как изображения (.png, .jpg ...), видео, аудио и т.д.
    В основном они предназначены для отображения контента или для функционирования отдельных элементов на странице.    

    Частью браузера является ранее упоминаемый движок js (в chrome это v8). При этом движок отвечает только за обработку тех конструкци в скрипте, которые
    общеприняты для самого js. При этом значительная часть фич по работе с элементами на странице, по работе с запросами к серверу и пр. фичи - 
    это так называемые API браузера, которые зашиты в нём и мы можем получить к ним доступ из скрипта js.

*/