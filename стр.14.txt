/**
    ====== Обработка и создание ошибок ======

    Рассмотрим задачу, когда есть функция, которая принимает в качестве аргумента объект и читает его свойства:

    ```
        function test(obj) {
            const func = obj.func();
        }

        test({});
    ```

    В этом случае в лог выведится ошибка, что функции func не существует.
    Чтобы исправить эту ошибку достаточно сделать проверку на существование функции и на проверку типа данных:

    ```
        function test(obj) {
            if (obj.func && (typeof obj.func === 'function')) {
                const func = obj.func();
            } else {
                console.log('incorrect data:', obj.func);
            }
        }

        test({});
    ```

    Однако не всегда есть возможность просто добавить проверку на входящие данные. 
    Например, если функция может принять некорректную JSON строку и попытаться распарсить её:

    ```
        function test(json) {
            const obj = JSON.parse(json);
        }

        const json = '{a: 12, b: ';
        test(json);
    ```

    В данном случае выводится ошибка о не корректном JSON. Аргументом может быть не корретно сохранённый объект или некоторые типы данных:

    ```
        JSON.parse(undefined);
    ```

    Чтобы отлавливать подобные ошибки и не препятствовать выполнению скрипта, в потенциально опасных местах можно использовать try-catch:

    ```
        function test(json) {
            let obj;

            try {
                obj = JSON.parse(json);
            } catch (err) {
                console.log('test: error', err);
                return; // Если продолжать код нельзя, можно выйти из функции
            }

            // Продолжение кода
        }

        const json = '{a: 12, b: ';
        test(json);
    ```

    В данном случае потенциально опасный код занесён в try и если возникнет ошибка, то её содержание будет в переменной err

    === Генерация исключений и ошибок

    Рассмотрим другую задачу: в определённую функцию приходит объект, который обрабатывается в try-catch. Если этот объект 
    не содержит определённые поля, то нужно перейти в catch и вывести лог с ошибкой.

    Для этого можно использовать throw - эта конструкция генерирует исключения, которые перехватываются в catch:

    ```
        function test(obj) {
            let data;

            try {
                data = obj.a;

                /**
                 * Если поля a нет или значение obj.a < 10
                 * То выбрасываем исключение, которое перехватывается в catch
                 */
                if (!obj.a || obj.a < 10) {
                    throw `error value obj.a: ${obj.a}`;
                }    
            } catch (e) {
                console.log('test: error', e);
            }
        }

        const testObj = {};

        test(testObj);
    ```

    Однако если нужно выбросить не просто исключение, а ошибку, то её можно сгенерировать, используя 
    конструктор Error:

    ```
        function test(obj) {
            let data;

            try {
                data = obj.a;

                if (!obj.a || obj.a < 10) {
                    // Генерируем ошибку через new Error
                    throw new Error(`error value obj.a: ${obj.a}`);
                }    
            } catch (e) {
                /**
                 * В "e" содержится текст ошибки, однако при console.log()
                 * будет выводиться лог не подсвеченный цветом ошибки
                 * поэтому выведем "e" через console.error()
                 */
                console.error('test: error', e);
            }
        }

        var testObj = {};
        
        test(testObj);
    ```

    Более подробно "про ошибки и try-catch
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%86%D0%B8%D0%B8_%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8_%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9
    https://medium.com/webbdev/js-6c7a3c5b4e61
    https://learn.javascript.ru/try-catch
    "
*/