/**
    ====== Функции ======
    
    Представим задачу: мы написали код, решающий определённую задачу. 
    Однако в скрипте повторяются значительные куски кода, и которые нужно удалить и заменить вызовом одной конструкции, 
    хранящей наш повторяющийся код.
    Такой конструкцией является функция:

    ```
    // Объявление функции
    function NameFunction (arg1, arg2, ...) {
        // тело функции
    }

    // Вызов функции
    NameFunction(argument1, argument2, ...);
    ```

    где: 
    - function: зарезервированное слово, указывающее на то, что далее будет код функции
    - NameFunction: имя функции, которое можно использовать для её вызова
    - argument1, argument2, ... - необязательные аргументы которые передаются в функцию и которые можно использовать в рамках этой функции
    важно: argument1 === arg1, а argument2 === arg2, т.е. программист сам определяет, как назвать аргументы, которые будут использоваться в NameFunction
    
    Тело функции в отличие от if и for всегда нужно оборачивать {}

    Пример использования функции:

    ```
    function logVariable(variable) {
        /**
         * Выводим в лог строку со значением variable
         * console.log - это тоже вызов функции, хранимой под ключом log в объекте console
         * функция, вызываемая по ключу log, может принимать и выводить сколько угодно аргументов, если их перечислить через запятую
         */
        console.log("переданная переменная variable", variable);
    }

    logVariable(42);
    ```

    Вернёмся к объектам.
    Как ранее было сказано, объект - это тип данных в js, который может хранить в себе данные по задаваемым программистом ключам.
    Т.е. в объекте мы можем указать следующее: 
    
    ```
        /**
         * Объявляем переменную obj, сохраняем в ней объект
         * в объекте прописываем поле с ключом log и значением logVariable
         * соответствующим названию функции logVariable
         */
        var obj = {
            log: logVariable
        };
        
        function logVariable(variable) {
            console.log("переданная переменная variable", variable);
        }

        // вызываем функцию logVariable, передаём в неё один числовой аргумент со значением 444
        obj.log(444)
    ```

    Заметим, что если объявить функцию через function и не сохранять её в отдельную переменную, то мы можем получить доступ к функции вне зависимости от того
    в каком месте скрипта она объявлена.

    Т.е.:

    ```
    // Будет вызвана функция, ошибки не будет
    test1();

    /**
     * Вызова не будет, скрипт не будет выполнен до конца, программа остановится на текущем моменте, т.к. 
     * при объявлении функции test2 важно, в каком месте программы объявлена и вызвана test2
     * появится ошибка о том test2 - это не функция, а undefined
     */
    test2();

    function test1 () {
        console.log(1);
    }

    var test2 = function () {
        console.log(2);
    }

    console.log(3);
    ```

    Данная ошибка связана с темой областью видимости переменной.

    === Область видимости
*/